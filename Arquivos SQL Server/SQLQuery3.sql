/* TRIGGERS EM SQL E TSQL */
USE EMPRESA;
GO

DROP TABLE TB_PRODUTOS;
DROP TABLE TB_HISTORICO;
GO

CREATE TABLE TB_PRODUTOS(
	IDPRODUTO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC (10,2) NOT NULL
);
GO

CREATE TABLE TB_HISTORICO(
	IDOPERACAO INT IDENTITY PRIMARY KEY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO_ANTIGO NUMERIC (10,2) NOT NULL,
	PRECO_NOVO NUMERIC (10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(50),
	MSG VARCHAR(100)
);
GO

INSERT INTO TB_PRODUTOS VALUES
('SQL SERVER','BD DEV',189.99),
('JAVA INTERMEDIARIO','LINGUAGEM',250.51),
('REACT','FRONT END',175.99);
GO

SELECT * FROM TB_PRODUTOS;
SELECT * FROM TB_HISTORICO;
GO

/* UPDATE */
UPDATE TB_PRODUTOS SET PRECO = 500.00
WHERE IDPRODUTO = 3
GO

UPDATE TB_PRODUTOS SET NOME = 'JAVA INTERMEDIARIO'
WHERE IDPRODUTO = 2
GO

SELECT SUSER_NAME()
GO

/* TRIGGER DE ATUALIZAR PRECO */
DROP TRIGGER TRG_ATUALIZA_PRECO
GO

CREATE TRIGGER TRG_ATUALIZA_PRECO 
ON DBO.TB_PRODUTOS
FOR UPDATE AS 
IF UPDATE (PRECO) /* TSQL */
BEGIN

	DECLARE @IDPRODUTO INT
	DECLARE @PRODUTO VARCHAR(50)
	DECLARE @CATEGORIA VARCHAR(30)
	DECLARE @PRECO NUMERIC(10,2)
	DECLARE @PRECONOVO NUMERIC (10,2)
	DECLARE @DATA DATETIME
	DECLARE @USUARIO VARCHAR(50)
	DECLARE @MSG VARCHAR(100)
	
	/* VALORES VINDOS DE TABELAS SÃO INSERIDOS COM SELECT */
	SELECT @IDPRODUTO = IDPRODUTO FROM INSERTED
	SELECT @PRODUTO = NOME FROM INSERTED
	SELECT @CATEGORIA = CATEGORIA FROM INSERTED
	SELECT @PRECO = PRECO FROM DELETED
	SELECT @PRECONOVO = PRECO  FROM INSERTED
	
	/* VALORES VINDOS DE FUNÇÕES -> SET */
	SET @DATA = GETDATE()
	SET @USUARIO = SUSER_NAME()
	SET @MSG = 'VALOR INSERIDO PELA TRIGGER'
	
	INSERT INTO TB_HISTORICO VALUES 
	(@PRODUTO, @CATEGORIA, @PRECO, @PRECONOVO, @DATA, @USUARIO, @MSG );
	
	PRINT 'TRIGGER CONCLUIDA COM SUCCESSO'
END
GO

/*******************************************************************
 TRIGGER SIMPLIFICADA COM ATRIBUIÇÃO DE VARIÁVEIS - BLOCO ANONIMO */
DROP TABLE TB_RESULTADO;
GO

CREATE TABLE TB_RESULTADO(
	IDRESULTADO INT IDENTITY PRIMARY KEY,
	RESULTADO INT
);
GO

INSERT INTO TB_RESULTADO VALUES 
((SELECT(10+5))),
((SELECT(8+4))),
((SELECT(3+6)));
GO

SELECT * FROM TB_RESULTADO;
GO

DECLARE 
@RESULTADO INT
SET @RESULTADO = (SELECT 75-63)
INSERT INTO TB_RESULTADO VALUES (@RESULTADO)
PRINT 'VALOR INSERIDO COM SUCESSO NA TABELA: ' + CAST(@RESULTADO AS VARCHAR);
GO

/************************************************************************
TRIGGER UPDATE */
DROP TABLE TB_EMPREGADO
GO

/* 1º TABELA */
CREATE TABLE TB_EMPREGADO(
	IDEMP INT PRIMARY KEY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
);
GO

ALTER TABLE TB_EMPREGADO ADD CONSTRAINT FK_GERENTE
FOREIGN KEY(IDGERENTE) REFERENCES TB_EMPREGADO(IDEMP)
GO

INSERT INTO TB_EMPREGADO  VALUES
(2,'MARCOS', 5860, NULL),
(3,'LUCAS', 11596, 1),
(1,'MARCELA', 6812, 1);

SELECT * FROM TB_EMPREGADO
GO

/* 2º TABELA - TABELA QUE IRÁ VER SAL.ANTIGO E NOVO  */
DROP TABLE TB_HIST_SALARIO
GO

CREATE TABLE TB_HIST_SALARIO(
	IDEMPREGADO INT,
	NOME VARCHAR (30),
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA DATETIME
)
GO

SELECT * FROM TB_HIST_SALARIO
GO

/* TRIGGER DE UPDATE DE SALARIO */
DROP TRIGGER TRG_HIST_SALARIO;
GO

CREATE TRIGGER TRG_HIST_SALARIO
ON DBO.TB_EMPREGADO
FOR UPDATE AS 
IF UPDATE (SALARIO)
BEGIN
	
	INSERT INTO TB_HIST_SALARIO 
	SELECT D.IDEMP, D.NOME, D.SALARIO, I.SALARIO, GETDATE() 
	FROM DELETED D, INSERTED I
	WHERE D.IDEMP = I.IDEMP;

	PRINT 'VALOR ATUALIZADO'
	
END
GO

UPDATE TB_EMPREGADO SET SALARIO = SALARIO*(1.1) /* AUMENTO DE 10% */
GO

/******************************************************
3º TABELA - RANGE - TETO E PISO DE SALARIO */
DROP TABLE TB_SALARIO_RANGE
GO

/* TABELA BASEADA NA TB_EMPREGADO */
CREATE TABLE TB_SALARIO_RANGE(
	MINSAL MONEY,
	MAXSAL MONEY
);

INSERT INTO TB_SALARIO_RANGE VALUES
(10000, 15000),
(5000, 7000),
(6500, 8000);

SELECT * FROM TB_SALARIO_RANGE 
GO

/* TRIGGER */
DROP TRIGGER TRG_RANGE
GO

CREATE TRIGGER TRG_RANGE
ON DBO.TB_EMPREGADO
FOR INSERT, UPDATE AS 

	DECLARE @MINSAL MONEY, @MAXSAL MONEY, @ATUALSAL MONEY

	SELECT @MINSAL = MINSAL, @MAXSAL = MAXSAL FROM TB_SALARIO_RANGE
	SELECT @ATUALSAL =  I.SALARIO FROM INSERTED I

	IF (@ATUALSAL < @MINSAL)
	BEGIN
		RAISERROR('SALARIO MENOR QUE O PISO', 16,1)
		ROLLBACK TRANSACTION
	END

	IF(@ATUALSAL > @MAXSAL)
	BEGIN
		RAISERROR('SALARIO MAIOR QUE O TETO', 16,1)
		ROLLBACK TRANSACTION
	END
GO

/* COMANDOS*/
SELECT * FROM TB_EMPREGADO
GO

UPDATE TB_EMPREGADO SET SALARIO = 16000.00 WHERE IDEMP = 3
GO

SP_HELPTEXT TRG_RANGE
GO